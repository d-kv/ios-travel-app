name: iOS tester

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    name: Build and Test default scheme using any available iPhone simulator
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: base64-to-fileKeys
        uses: timheuer/base64-to-file@v1.2
        with:
          fileName: 'Keys.plist'
          fileDir: '/Users/runner/work/ios-travel-app/ios-travel-app/AfterWork/'
          encodedString: ${{ secrets.KeysPLIST }}
      - name: base64-to-fileKeysTEST
        uses: timheuer/base64-to-file@v1.2
        with:
          fileName: 'Keys.plist'
          fileDir: '/Users/runner/work/test/test/AfterWork/'
          encodedString: ${{ secrets.KeysPLIST }}
      - name: base64-to-fileGoogle
        uses: timheuer/base64-to-file@v1.2
        with:
          fileName: 'GoogleService-Info.plist'
          fileDir: '/Users/runner/work/ios-travel-app/ios-travel-app/AfterWork/'
          encodedString: ${{ secrets.GooglePLIST }}
      - name: base64-to-fileGoogleTEST
        uses: timheuer/base64-to-file@v1.2
        with:
          fileName: 'GoogleService-Info.plist'
          fileDir: '/Users/runner/work/test/test/AfterWork/'
          encodedString: ${{ secrets.GooglePLIST }}
      - name: Set Default Scheme
        run: |
          scheme_list=$(xcodebuild -list -json | tr -d "\n")
          default=$(echo $scheme_list | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]")
          echo $default | cat >default
          echo Using default scheme: $default
      - name: Build
        env:
          scheme: ${{ 'default' }}
          platform: ${{ 'iOS Simulator' }}
        run: |
          # xcrun xctrace returns via stderr, not the expected stdout (see https://developer.apple.com/forums/thread/663959)
          device=`xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}' | sed -e "s/ Simulator$//"`
          if [ $scheme = default ]; then scheme=$(cat default); fi
          if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
          file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
          xcodebuild build-for-testing -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=$device"
